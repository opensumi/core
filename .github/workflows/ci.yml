name: CI

# Cancel prev CI if new commit come
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - v*.*
  pull_request:
    branches:
      - main
      - v*.*
    paths:
      - 'packages/**'

jobs:
  # Prepare node modules. Reuse cache if available
  setup:
    name: setup
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: cache yarn.lock
        uses: actions/cache@v3
        with:
          path: .package-temp-dir
          key: lock-${{ github.sha }}
      - name: Get yarn cache directory path
        id: yarn_cache_dir_path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v3
        id: yarn_cache
        with:
          path: ${{ steps.yarn_cache_dir_path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: create yarn.lock
        run: yarn install --mode update-lockfile

      - name: hack for single file
        run: |
          node ./scripts/actions/cache.js
  browser:
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # region yarn cache start
      - name: restore cache from yarn.lock
        uses: actions/cache@v3
        with:
          path: .package-temp-dir
          key: lock-${{ github.sha }}
      - name: restore yarn.lock
        run: |
          node ./scripts/actions/restore-cache.js
      - name: Get yarn cache directory path
        id: yarn_cache_dir_path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v3
        id: yarn_cache
        with:
          path: ${{ steps.yarn_cache_dir_path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: install
        if: steps.yarn_cache.outputs.cache-hit != 'true'
        run: yarn install
      #endregion

      - name: CI
        run: |
          yarn run ci -- -- --selectProjects jsdom

      - if: ${{ matrix.node-version == '14.x' && matrix.os == 'ubuntu-latest' }}
        name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CORE_CODECOV_TOKEN }}
          flags: jsdom
          directory: ./coverage
  node:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        node-version: [14.x]
    needs: setup

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # region yarn cache start
      - name: restore cache from yarn.lock
        uses: actions/cache@v3
        with:
          path: .package-temp-dir
          key: lock-${{ github.sha }}
      - name: restore yarn.lock
        run: |
          node ./scripts/actions/restore-cache.js
      - name: Get yarn cache directory path
        id: yarn_cache_dir_path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v3
        id: yarn_cache
        with:
          path: ${{ steps.yarn_cache_dir_path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: install
        if: steps.yarn_cache.outputs.cache-hit != 'true'
        run: yarn install
      #endregion

      - name: CI
        run: |
          yarn run ci -- -- --selectProjects node

      - if: ${{ matrix.node-version == '14.x' && matrix.os == 'ubuntu-latest' }}
        name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CORE_CODECOV_TOKEN }}
          flags: node
          directory: ./coverage
