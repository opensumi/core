name: Pull Request Next Release

on:
  workflow_dispatch:
  issue_comment:

jobs:
  next-version:
    name: Next Version

    runs-on: ubuntu-latest
    # 在 pull request 评论触发的 issue_comment 事件中执行
    # 需满足评论人为项目 OWNER 或 MEMBER，或评论人为 PR 发起人
    if: |
      github.event.issue.pull_request &&
      (github.event.issue.user.login == github.event.comment.user.login ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'OWNER') &&
      startsWith(github.event.comment.body, '/publish')

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - run: |
          echo "HEAD_SHA=${{steps.comment-branch.outputs.head_sha}}" >> $GITHUB_ENV

      - uses: actions/github-script@v4
        id: run-check-suite
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // 创建一个 checkSuite
            const suite = await github.checks.createSuite({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: process.env.HEAD_SHA,
            });

            // 创建一个 checkRun
            const check = await github.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: '🚀🚀🚀 Pre-Release Version for pull request',
              status: 'in_progress',
              head_sha: suite.data.head_sha,
              output: {
                title: 'Pre-Release version is publishing. Please wait for a moment...'',
                summary: `A version for pull request is **running**. sha: **${process.env.HEAD_SHA}**`,
              },
            });
            return check.data.id;

      - run: |
          echo "CHECK_RUN_ID=${{steps.run-check-suite.outputs.result}}" >> $GITHUB_ENV

      # Checkout 到 PR 对应分支
      - uses: actions/checkout@v2
        if: success()
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      # 安装依赖并构建
      - name: Install dependencies & Build
        run: |
          npm i
          npm run init

      # 发布 next 版本，并在 issue 中回复
      # 使用 lerna publish 命令
      # --preid 指定前缀，确保版本唯一，前缀使用 $(date +%s) 生成类似  2.12.1-1640328423.0
      # --dist-tag 指定发布的 tag，默认是 latest
      # --no-push 指定不推送到远程仓库
      # --no-git-tag-version 不生成 git tag
      # --prepatch 指定发布的版本为 prepatch 版本, 只更新 patch 版本
      # --ignore-scripts 指定不执行脚本
      # --ignore-prepublish 忽略 pre-publish 脚本
      - name: Publish prepatch version
        run: |
          lerna publish --exact --preid next-$(date +%s) --dist-tag next --force-publish='*' --no-push --no-git-tag-version prepatch --ignore-prepublish --ignore-scripts --no-private -y
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Set Current Version
        if: success()
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      # 发布失败后，更新 checkRun 状态
      - uses: actions/github-script@v4
        if: failure()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'completed',
              completed_at: new Date(),
              conclusion: 'failure',
              check_run_id: process.env.CHECK_RUN_ID,
              output: {
                title: 'Pre-Release Version publish failed',
                summary: `A version for pull request is **failed**. please check the error.`,
              }
            });

      # 发布完成后，在 issue 中评论，并更新 checkRun 状态
      - uses: actions/github-script@v4
        if: success()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issueBody =
              '🎉 Pre-Release version ' +
              process.env.CURRENT_VERSION +
              ' publish successful! You can install prerelease version via `npm install package@' +
              process.env.CURRENT_VERSION +
              ' `' +
              ' [@' +
              context.payload.comment.user.login +
              ']' +
              '(https://github.com/' +
              context.payload.comment.user.login +
              ')';

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: issueBody
            });

            github.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'completed',
              completed_at: new Date(),
              conclusion: 'success',
              check_run_id: process.env.CHECK_RUN_ID,
              output: {
                title: 'Pre-Release Version publish successful!',
                summary: `A version for pull request is **published**. version: **${process.env.CURRENT_VERSION}**`,
              }
            });
