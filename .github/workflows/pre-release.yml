name: Next Release Flow

on:
  issues:
    types: [opened, reopened, labeled]

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: |
      (github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'OWNER') &&
      startsWith(github.event.issue.body, '## OpenSumi next version prerelease')

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: "https://registry.npmjs.org"

      # ÁîüÊàê Changelog, ‰ºöÂ∞ÜÂÜÖÂÆπÂÜôÂÖ•Âà∞ ./releaselog.md ‰∏≠
      - name: Create release log
        id: release-log
        run:  |
          npm run changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Êõ¥Êñ∞ Changelog Âà∞ pre-release issue Ê≠£Êñá
      - name: Update prerelease changelog for current issue
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const releasemd = fs.readFileSync('./releaselog.md', 'utf8').toString();
            github.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## OpenSumi next version prerelease\r\n ${releasemd}`
            })

      # ÂÆâË£Ö‰æùËµñÂπ∂ÊûÑÂª∫
      - name: Install dependencies & Build
        run: |
          npm i
          npm run init

      - name: Set Current Version
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      - name: Tag Check
        id: tag_check
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi

      # ÂèëÂ∏É next ÁâàÊú¨ÔºåÂπ∂Âú® issue ‰∏≠ÂõûÂ§ç
      - name: Publish prepatch version
        run: |
          lerna publish --preid next --dist-tag next --force-publish='*' --no-push --no-git-tag-version --canary --ignore-prepublish --ignore-scripts --no-private -y
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üéâ Pre Release. You can install prerelease version via `npm install package@next`'
            })
