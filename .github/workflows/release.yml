name: Release

on:
  # 创建 Release Issue 后执行
  issues:
    types: [opened]
  # 在 Release Issue 评论特定内容后执行
  issue_comment:
    events: [created]

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: |
      (github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'OWNER') &&
      ((startsWith(github.event.issue.body, '## OpenSumi release') && github.event.issue.title == 'OpenSumi Release') || startsWith(github.event.comment.body, '/Release'))

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Set Current Version
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      - name: Tag Check
        id: tag_check
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi

      # 安装依赖并构建
      - name: Install dependencies & Build
        run: |
          npm i
          npm run init

      # 生成 Changelog, 会将内容写入到 ./releaselog.md 中
      - name: Create release log
        id: release-log
        run: |
          npm run changelog -- --remote
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 更新 Changelog 到 release issue 正文
      - name: Update prerelease changelog for current issue
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const releasemd = fs.readFileSync('./releaselog.md', 'utf8').toString();
            context.env.CHANGELOG = releasemd;
            github.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🤖 OpenSumi Release ${new Date().toLocaleDateString()}`,
              body: `${new Date().toLocaleDateString()} Release Summary \r\n ${releasemd}`
            })

      - name: Create Git Tag
        if: steps.tag_check.outputs.exists_tag == 'false'
        uses: pkgdeps/git-tag-action@v2
        with:
          version: ${{ env.CURRENT_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"

      - name: Create Release
        id: create_release
        if: steps.tag_check.outputs.exists_tag == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          release_name: OpenSumi Release v${{ env.CURRENT_VERSION }}
          body: |
            ${{ env.CHANGELOG }}
          draft: false
          prerelease: false

      # 发布正式版本，并在 issue 中回复
      # - name: Publish prod version
      #   if: steps.tag_check.outputs.exists_tag == 'false'
      #   run: |
      #     lerna publish from-package --dist-tag latest --force-publish='*' --ignore-prepublish --ignore-scripts --no-private -y
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🎉 Release version publish successful! You can install release version via `npm install package@latest`'
            })
